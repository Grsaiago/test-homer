# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.28.0
# source: query.sql
from typing import Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from db import models


CREATE_LEAD = """-- name: create_lead \\:one


INSERT INTO lead_info (
	nome_do_lead
) VALUES ( NULL ) RETURNING id, nome_do_lead, quantidade_de_quartos, bairro, orcamento, temperatura_do_lead, data_e_hora_da_chamada, criado_em, atualizado_em
"""


CREATE_LEAD_WITH_NAME = """-- name: create_lead_with_name \\:one
INSERT INTO lead_info (
	nome_do_lead
) VALUES ( :p1 ) RETURNING id, nome_do_lead, quantidade_de_quartos, bairro, orcamento, temperatura_do_lead, data_e_hora_da_chamada, criado_em, atualizado_em
"""


GET_LEAD_BY_ID = """-- name: get_lead_by_id \\:one

SELECT	id, nome_do_lead, quantidade_de_quartos, bairro, orcamento, temperatura_do_lead, data_e_hora_da_chamada, criado_em, atualizado_em
FROM lead_info as li
	WHERE li.id = :p1
"""


GET_LEAD_BY_NAME = """-- name: get_lead_by_name \\:one
SELECT	id, nome_do_lead, quantidade_de_quartos, bairro, orcamento, temperatura_do_lead, data_e_hora_da_chamada, criado_em, atualizado_em
FROM lead_info as li
	WHERE li.nome_do_lead = :p1
"""


UPDATE_BUDGET = """-- name: update_budget \\:exec
UPDATE	lead_info
	SET orcamento = :p2
	WHERE id = :p1
"""


UPDATE_CALL_DATE_TIME = """-- name: update_call_date_time \\:exec
UPDATE	lead_info
	SET data_e_hora_da_chamada = :p2
	WHERE id = :p1
"""


UPDATE_LEAD_NAME = """-- name: update_lead_name \\:one

UPDATE	lead_info
	SET nome_do_lead = :p2
	WHERE id = :p1
RETURNING id, nome_do_lead, quantidade_de_quartos, bairro, orcamento, temperatura_do_lead, data_e_hora_da_chamada, criado_em, atualizado_em
"""


UPDATE_LEAD_TEMPERATURE = """-- name: update_lead_temperature \\:exec
UPDATE	lead_info
	SET temperatura_do_lead = :p2
	WHERE id = :p1
"""


UPDATE_NEIGHBOURHOOD = """-- name: update_neighbourhood \\:exec
UPDATE	lead_info
	SET bairro = :p2
	WHERE id = :p1
"""


UPDATE_ROOM_AMMOUNT = """-- name: update_room_ammount \\:exec
UPDATE	lead_info
	SET quantidade_de_quartos = :p2
	WHERE id = :p1
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def create_lead(self) -> Optional[models.LeadInfo]:
        row = self._conn.execute(sqlalchemy.text(CREATE_LEAD)).first()
        if row is None:
            return None
        return models.LeadInfo(
            id=row[0],
            nome_do_lead=row[1],
            quantidade_de_quartos=row[2],
            bairro=row[3],
            orcamento=row[4],
            temperatura_do_lead=row[5],
            data_e_hora_da_chamada=row[6],
            criado_em=row[7],
            atualizado_em=row[8],
        )

    def create_lead_with_name(self, *, nome_do_lead: Optional[str]) -> Optional[models.LeadInfo]:
        row = self._conn.execute(sqlalchemy.text(CREATE_LEAD_WITH_NAME), {"p1": nome_do_lead}).first()
        if row is None:
            return None
        return models.LeadInfo(
            id=row[0],
            nome_do_lead=row[1],
            quantidade_de_quartos=row[2],
            bairro=row[3],
            orcamento=row[4],
            temperatura_do_lead=row[5],
            data_e_hora_da_chamada=row[6],
            criado_em=row[7],
            atualizado_em=row[8],
        )

    def get_lead_by_id(self, *, id: int) -> Optional[models.LeadInfo]:
        row = self._conn.execute(sqlalchemy.text(GET_LEAD_BY_ID), {"p1": id}).first()
        if row is None:
            return None
        return models.LeadInfo(
            id=row[0],
            nome_do_lead=row[1],
            quantidade_de_quartos=row[2],
            bairro=row[3],
            orcamento=row[4],
            temperatura_do_lead=row[5],
            data_e_hora_da_chamada=row[6],
            criado_em=row[7],
            atualizado_em=row[8],
        )

    def get_lead_by_name(self, *, nome_do_lead: Optional[str]) -> Optional[models.LeadInfo]:
        row = self._conn.execute(sqlalchemy.text(GET_LEAD_BY_NAME), {"p1": nome_do_lead}).first()
        if row is None:
            return None
        return models.LeadInfo(
            id=row[0],
            nome_do_lead=row[1],
            quantidade_de_quartos=row[2],
            bairro=row[3],
            orcamento=row[4],
            temperatura_do_lead=row[5],
            data_e_hora_da_chamada=row[6],
            criado_em=row[7],
            atualizado_em=row[8],
        )

    def update_budget(self, *, id: int, orcamento: Optional[int]) -> None:
        self._conn.execute(sqlalchemy.text(UPDATE_BUDGET), {"p1": id, "p2": orcamento})

    def update_call_date_time(self, *, id: int, data_e_hora_da_chamada: Optional[str]) -> None:
        self._conn.execute(sqlalchemy.text(UPDATE_CALL_DATE_TIME), {"p1": id, "p2": data_e_hora_da_chamada})

    def update_lead_name(self, *, id: int, nome_do_lead: Optional[str]) -> Optional[models.LeadInfo]:
        row = self._conn.execute(sqlalchemy.text(UPDATE_LEAD_NAME), {"p1": id, "p2": nome_do_lead}).first()
        if row is None:
            return None
        return models.LeadInfo(
            id=row[0],
            nome_do_lead=row[1],
            quantidade_de_quartos=row[2],
            bairro=row[3],
            orcamento=row[4],
            temperatura_do_lead=row[5],
            data_e_hora_da_chamada=row[6],
            criado_em=row[7],
            atualizado_em=row[8],
        )

    def update_lead_temperature(self, *, id: int, temperatura_do_lead: models.Temperaturadolead) -> None:
        self._conn.execute(sqlalchemy.text(UPDATE_LEAD_TEMPERATURE), {"p1": id, "p2": temperatura_do_lead})

    def update_neighbourhood(self, *, id: int, bairro: Optional[str]) -> None:
        self._conn.execute(sqlalchemy.text(UPDATE_NEIGHBOURHOOD), {"p1": id, "p2": bairro})

    def update_room_ammount(self, *, id: int, quantidade_de_quartos: Optional[int]) -> None:
        self._conn.execute(sqlalchemy.text(UPDATE_ROOM_AMMOUNT), {"p1": id, "p2": quantidade_de_quartos})


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def create_lead(self) -> Optional[models.LeadInfo]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_LEAD))).first()
        if row is None:
            return None
        return models.LeadInfo(
            id=row[0],
            nome_do_lead=row[1],
            quantidade_de_quartos=row[2],
            bairro=row[3],
            orcamento=row[4],
            temperatura_do_lead=row[5],
            data_e_hora_da_chamada=row[6],
            criado_em=row[7],
            atualizado_em=row[8],
        )

    async def create_lead_with_name(self, *, nome_do_lead: Optional[str]) -> Optional[models.LeadInfo]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_LEAD_WITH_NAME), {"p1": nome_do_lead})).first()
        if row is None:
            return None
        return models.LeadInfo(
            id=row[0],
            nome_do_lead=row[1],
            quantidade_de_quartos=row[2],
            bairro=row[3],
            orcamento=row[4],
            temperatura_do_lead=row[5],
            data_e_hora_da_chamada=row[6],
            criado_em=row[7],
            atualizado_em=row[8],
        )

    async def get_lead_by_id(self, *, id: int) -> Optional[models.LeadInfo]:
        row = (await self._conn.execute(sqlalchemy.text(GET_LEAD_BY_ID), {"p1": id})).first()
        if row is None:
            return None
        return models.LeadInfo(
            id=row[0],
            nome_do_lead=row[1],
            quantidade_de_quartos=row[2],
            bairro=row[3],
            orcamento=row[4],
            temperatura_do_lead=row[5],
            data_e_hora_da_chamada=row[6],
            criado_em=row[7],
            atualizado_em=row[8],
        )

    async def get_lead_by_name(self, *, nome_do_lead: Optional[str]) -> Optional[models.LeadInfo]:
        row = (await self._conn.execute(sqlalchemy.text(GET_LEAD_BY_NAME), {"p1": nome_do_lead})).first()
        if row is None:
            return None
        return models.LeadInfo(
            id=row[0],
            nome_do_lead=row[1],
            quantidade_de_quartos=row[2],
            bairro=row[3],
            orcamento=row[4],
            temperatura_do_lead=row[5],
            data_e_hora_da_chamada=row[6],
            criado_em=row[7],
            atualizado_em=row[8],
        )

    async def update_budget(self, *, id: int, orcamento: Optional[int]) -> None:
        await self._conn.execute(sqlalchemy.text(UPDATE_BUDGET), {"p1": id, "p2": orcamento})

    async def update_call_date_time(self, *, id: int, data_e_hora_da_chamada: Optional[str]) -> None:
        await self._conn.execute(sqlalchemy.text(UPDATE_CALL_DATE_TIME), {"p1": id, "p2": data_e_hora_da_chamada})

    async def update_lead_name(self, *, id: int, nome_do_lead: Optional[str]) -> Optional[models.LeadInfo]:
        row = (await self._conn.execute(sqlalchemy.text(UPDATE_LEAD_NAME), {"p1": id, "p2": nome_do_lead})).first()
        if row is None:
            return None
        return models.LeadInfo(
            id=row[0],
            nome_do_lead=row[1],
            quantidade_de_quartos=row[2],
            bairro=row[3],
            orcamento=row[4],
            temperatura_do_lead=row[5],
            data_e_hora_da_chamada=row[6],
            criado_em=row[7],
            atualizado_em=row[8],
        )

    async def update_lead_temperature(self, *, id: int, temperatura_do_lead: models.Temperaturadolead) -> None:
        await self._conn.execute(sqlalchemy.text(UPDATE_LEAD_TEMPERATURE), {"p1": id, "p2": temperatura_do_lead})

    async def update_neighbourhood(self, *, id: int, bairro: Optional[str]) -> None:
        await self._conn.execute(sqlalchemy.text(UPDATE_NEIGHBOURHOOD), {"p1": id, "p2": bairro})

    async def update_room_ammount(self, *, id: int, quantidade_de_quartos: Optional[int]) -> None:
        await self._conn.execute(sqlalchemy.text(UPDATE_ROOM_AMMOUNT), {"p1": id, "p2": quantidade_de_quartos})
